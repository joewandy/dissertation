%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 52 59 1387 669
%%HiResBoundingBox: 52.500000 59.500000 1386.500000 668.500000
%Produced by poppler pdftops version: 0.43.0 (http://poppler.freedesktop.org)
%%Creator: matplotlib 1.5.1, http://matplotlib.org
%%LanguageLevel: 2
%%DocumentMedia: 508x254mm 1440 720 0 () ()
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-665 -325 2000 1006] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 34 dict def
CharProcs begin
/parenright {
333 0 61 -209 297 728 setcachedevice
q
124 -209 m
61 -209 l
158 -53 207 102 207 259 c
207 320 200 381 186 441 c
174 489 159 536 139 582 c
126 610 100 659 61 728 c
124 728 l
184 646 229 564 259 482 c
284 410 297 336 297 259 c
297 171 280 86 246 4 c
212 -77 172 -148 124 -209 c
f
Q
} def
/period {
278 0 91 0 191 100 setcachedevice
q
91 0 100 100 re
f
Q
} def
/one {
556 0 109 0 373 719 setcachedevice
q
373 0 m
285 0 l
285 560 l
263 540 235 519 201 499 c
167 479 136 464 109 454 c
109 539 l
158 562 201 590 238 623 c
274 655 300 687 316 719 c
373 719 l
373 0 l
f
Q
} def
/four {
556 0 13 0 508 716 setcachedevice
q
323 0 m
323 171 l
13 171 l
13 252 l
339 716 l
411 716 l
411 252 l
508 252 l
508 171 l
411 171 l
411 0 l
323 0 l
323 252 m
323 575 l
99 252 l
323 252 l
f
Q
} def
/zero {
556 0 42 -11 508 719 setcachedevice
q
42 353 m
42 437 50 505 68 557 c
85 609 111 649 145 677 c
179 705 223 719 275 719 c
313 719 347 711 376 695 c
404 679 428 657 447 628 c
466 599 481 564 492 522 c
502 480 508 423 508 353 c
508 269 499 201 482 149 c
465 97 439 58 405 30 c
371 2 327 -11 275 -11 c
205 -11 151 13 112 62 c
65 121 42 218 42 353 c
132 353 m
132 235 145 157 173 118 c
200 79 234 60 275 60 c
315 60 348 79 376 118 c
404 157 418 235 418 353 c
418 471 404 549 376 588 c
348 626 314 646 274 646 c
233 646 201 629 177 595 c
147 551 132 470 132 353 c
f
Q
} def
/parenleft {
333 0 61 -209 297 728 setcachedevice
q
234 -209 m
185 -148 144 -77 111 4 c
77 86 61 171 61 259 c
61 336 73 410 98 482 c
127 564 172 646 234 728 c
297 728 l
257 660 231 611 219 583 c
199 538 183 491 172 442 c
158 381 151 320 151 259 c
151 102 199 -53 297 -209 c
234 -209 l
f
Q
} def
/space {
278 0 0 0 0 0 setcachedevice
q
Q
} def
/six {
556 0 38 -11 510 719 setcachedevice
q
498 541 m
410 534 l
402 568 391 593 377 609 c
353 633 323 646 289 646 c
261 646 236 638 215 623 c
187 603 166 573 150 535 c
134 496 125 441 125 369 c
146 401 172 424 203 440 c
233 456 265 464 299 464 c
357 464 407 442 448 399 c
489 356 510 300 510 232 c
510 187 500 145 481 107 c
461 68 435 39 401 19 c
367 -1 329 -11 286 -11 c
212 -11 153 15 107 69 c
61 122 38 211 38 335 c
38 473 63 573 114 637 c
158 691 218 719 294 719 c
350 719 397 703 433 671 c
469 639 490 596 498 541 c
139 232 m
139 202 145 173 158 145 c
170 117 188 96 212 82 c
235 67 259 60 285 60 c
321 60 353 75 380 105 c
406 135 420 175 420 227 c
420 276 406 315 380 344 c
354 372 321 387 281 387 c
241 387 208 372 180 344 c
152 315 139 278 139 232 c
f
Q
} def
/two {
556 0 29 0 503 719 setcachedevice
q
503 84 m
503 0 l
30 0 l
29 21 33 41 41 61 c
53 93 72 124 98 156 c
124 187 163 223 213 265 c
291 328 343 378 371 416 c
398 453 412 488 412 522 c
412 556 399 586 374 610 c
349 634 317 646 277 646 c
235 646 201 633 176 608 c
150 582 137 547 137 502 c
47 512 l
53 579 76 630 116 666 c
156 701 211 719 279 719 c
347 719 402 699 442 661 c
482 623 502 576 502 520 c
502 491 496 463 484 435 c
472 407 453 378 426 348 c
399 317 354 275 291 222 c
238 178 204 148 189 132 c
174 116 162 100 152 84 c
503 84 l
f
Q
} def
/plus {
584 0 56 116 528 589 setcachedevice
q
250 116 m
250 312 l
56 312 l
56 394 l
250 394 l
250 589 l
333 589 l
333 394 l
528 394 l
528 312 l
333 312 l
333 116 l
250 116 l
f
Q
} def
/three {
556 0 42 -12 511 719 setcachedevice
q
42 189 m
130 201 l
140 151 157 115 181 93 c
205 71 235 60 270 60 c
311 60 346 74 374 103 c
402 131 417 167 417 209 c
417 249 403 283 377 309 c
351 335 317 349 277 349 c
260 349 239 345 215 339 c
225 416 l
231 415 235 415 239 415 c
276 415 310 424 340 444 c
370 464 385 494 385 535 c
385 567 374 593 352 614 c
330 635 302 646 268 646 c
234 646 205 635 182 614 c
159 592 145 560 139 518 c
51 533 l
61 592 86 638 124 670 c
162 702 209 719 266 719 c
305 719 341 710 374 693 c
406 676 431 653 449 625 c
467 596 476 565 476 533 c
476 501 467 473 451 448 c
434 422 409 402 377 388 c
419 378 451 357 475 327 c
499 296 511 257 511 211 c
511 149 488 96 442 53 c
396 9 339 -12 270 -12 c
206 -12 154 6 113 44 c
71 81 48 129 42 189 c
f
Q
} def
/A {
667 0 0 0 668 716 setcachedevice
q
0 0 m
273 716 l
375 716 l
668 0 l
561 0 l
477 217 l
178 217 l
99 0 l
0 0 l
205 294 m
448 294 l
373 492 l
350 552 333 602 322 641 c
313 595 300 549 284 504 c
205 294 l
f
Q
} def
/C {
722 0 50 -11 683 728 setcachedevice
q
588 251 m
683 227 l
663 149 627 89 575 49 c
523 9 460 -11 386 -11 c
309 -11 246 4 198 35 c
149 66 112 111 87 171 c
62 231 50 295 50 363 c
50 437 64 502 92 558 c
120 614 161 656 214 685 c
266 713 324 728 388 728 c
459 728 519 709 568 673 c
617 637 651 586 670 520 c
577 498 l
560 550 536 587 505 611 c
473 635 434 647 386 647 c
330 647 284 633 247 607 c
210 581 184 545 169 501 c
154 457 147 411 147 364 c
147 302 156 249 174 204 c
192 158 219 124 257 102 c
294 80 334 69 378 69 c
431 69 476 84 513 115 c
549 145 574 191 588 251 c
f
Q
} def
/B {
667 0 73 0 614 716 setcachedevice
q
73 0 m
73 716 l
342 716 l
396 716 440 708 473 694 c
506 679 532 657 551 627 c
569 597 579 565 579 533 c
579 502 570 473 554 446 c
537 419 512 397 479 381 c
522 368 555 346 579 316 c
602 285 614 249 614 208 c
614 174 606 142 592 114 c
578 85 560 63 540 47 c
519 31 493 20 462 12 c
430 4 392 0 346 0 c
73 0 l
168 415 m
323 415 l
365 415 395 417 413 423 c
437 430 455 442 467 459 c
479 475 486 496 486 521 c
486 545 480 566 469 584 c
457 602 441 614 420 621 c
398 627 362 631 311 631 c
168 631 l
168 415 l
168 84 m
346 84 l
376 84 398 85 411 88 c
432 92 450 98 465 107 c
479 116 491 129 501 147 c
511 164 516 184 516 208 c
516 234 509 257 495 277 c
481 297 462 311 438 319 c
414 327 379 331 333 331 c
168 331 l
168 84 l
f
Q
} def
/H {
722 0 80 0 642 716 setcachedevice
q
80 0 m
80 716 l
175 716 l
175 422 l
547 422 l
547 716 l
642 716 l
642 0 l
547 0 l
547 337 l
175 337 l
175 0 l
80 0 l
f
Q
} def
/M {
833 0 74 0 757 716 setcachedevice
q
74 0 m
74 716 l
217 716 l
386 209 l
402 161 413 126 420 103 c
428 129 441 167 458 218 c
630 716 l
757 716 l
757 0 l
666 0 l
666 599 l
458 0 l
373 0 l
166 609 l
166 0 l
74 0 l
f
Q
} def
/O {
778 0 48 -11 733 729 setcachedevice
q
48 349 m
48 467 80 560 144 628 c
208 695 290 729 391 729 c
457 729 516 713 569 681 c
622 649 663 605 691 549 c
719 492 733 428 733 357 c
733 284 718 219 689 162 c
659 104 618 61 564 32 c
510 3 453 -11 391 -11 c
323 -11 263 5 210 37 c
156 69 116 113 89 169 c
61 225 48 285 48 349 c
146 347 m
146 261 169 193 215 143 c
261 93 320 69 390 69 c
461 69 520 94 566 144 c
612 194 635 265 635 357 c
635 415 625 466 605 510 c
585 553 557 587 519 611 c
481 635 438 647 392 647 c
324 647 266 624 218 578 c
170 532 146 455 146 347 c
f
Q
} def
/N {
722 0 76 0 640 716 setcachedevice
q
76 0 m
76 716 l
173 716 l
549 154 l
549 716 l
640 716 l
640 0 l
543 0 l
167 563 l
167 0 l
76 0 l
f
Q
} def
/five {
556 0 42 -11 516 706 setcachedevice
q
42 188 m
134 195 l
140 150 156 116 181 94 c
206 71 236 60 271 60 c
313 60 349 76 379 108 c
408 140 423 182 423 235 c
423 285 408 324 380 353 c
352 382 315 397 270 397 c
242 397 216 390 193 377 c
170 364 152 348 140 328 c
57 338 l
126 706 l
482 706 l
482 622 l
197 622 l
158 430 l
201 460 246 475 293 475 c
355 475 408 453 451 410 c
494 366 516 311 516 243 c
516 178 497 122 459 75 c
413 17 351 -11 271 -11 c
206 -11 153 7 112 43 c
70 79 47 127 42 188 c
f
Q
} def
/T {
611 0 23 0 591 716 setcachedevice
q
259 0 m
259 631 l
23 631 l
23 716 l
591 716 l
591 631 l
354 631 l
354 0 l
259 0 l
f
Q
} def
/a {
556 0 36 -11 514 530 setcachedevice
q
404 64 m
371 36 340 16 310 5 c
280 -5 247 -11 213 -11 c
156 -11 112 2 82 30 c
51 58 36 93 36 137 c
36 162 41 185 53 206 c
65 227 80 244 99 257 c
117 269 138 279 162 286 c
179 290 205 294 240 299 c
311 307 363 317 397 329 c
397 341 397 348 397 352 c
397 388 389 413 373 428 c
350 448 316 458 272 458 c
230 458 200 450 180 436 c
160 421 146 395 137 359 c
51 371 l
59 407 72 437 90 460 c
108 482 133 500 167 512 c
201 524 240 530 285 530 c
329 530 365 524 393 514 c
421 504 441 491 454 475 c
467 459 476 440 481 416 c
484 400 486 373 486 334 c
486 217 l
486 135 487 84 491 62 c
495 40 502 20 514 0 c
422 0 l
412 18 406 39 404 64 c
397 260 m
365 247 317 236 253 227 c
217 221 191 215 176 209 c
161 203 150 193 142 181 c
134 168 130 154 130 139 c
130 115 138 96 156 80 c
174 64 200 57 234 57 c
268 57 298 64 324 79 c
350 94 370 114 383 140 c
392 160 397 189 397 228 c
397 260 l
f
Q
} def
/c {
500 0 39 -11 491 530 setcachedevice
q
404 190 m
491 179 l
481 119 457 72 418 39 c
379 5 331 -11 275 -11 c
203 -11 146 12 103 58 c
60 104 39 170 39 257 c
39 313 48 362 67 404 c
85 446 113 477 151 498 c
189 519 230 530 275 530 c
331 530 377 515 413 487 c
449 459 472 418 482 366 c
397 353 l
389 387 374 413 354 431 c
333 449 308 458 279 458 c
234 458 198 442 170 410 c
142 378 129 328 129 260 c
129 190 142 139 169 108 c
195 76 230 61 274 61 c
308 61 337 71 360 92 c
383 113 398 146 404 190 c
f
Q
} def
/e {
556 0 37 -11 515 530 setcachedevice
q
421 167 m
512 156 l
497 102 470 61 432 32 c
393 3 344 -11 284 -11 c
208 -11 147 12 103 58 c
59 104 37 170 37 255 c
37 342 59 410 104 458 c
148 506 207 530 279 530 c
348 530 405 506 449 459 c
493 412 515 346 515 260 c
515 254 514 247 514 237 c
127 237 l
130 179 146 136 175 106 c
204 76 240 61 284 61 c
316 61 344 69 367 86 c
389 102 407 129 421 167 c
132 309 m
422 309 l
418 353 407 385 389 407 c
361 441 324 458 280 458 c
239 458 205 444 178 417 c
150 390 135 354 132 309 c
f
Q
} def
/f {
278 0 9 0 313 728 setcachedevice
q
87 0 m
87 450 l
9 450 l
9 519 l
87 519 l
87 574 l
87 608 90 634 96 651 c
104 674 119 693 141 707 c
162 721 192 728 230 728 c
255 728 283 725 313 719 c
299 643 l
281 645 264 647 248 647 c
221 647 202 641 191 630 c
179 618 174 597 174 566 c
174 519 l
275 519 l
275 450 l
174 450 l
174 0 l
87 0 l
f
Q
} def
/i {
222 0 66 0 154 716 setcachedevice
q
66 615 m
66 716 l
154 716 l
154 615 l
66 615 l
66 0 m
66 519 l
154 519 l
154 0 l
66 0 l
f
Q
} def
/m {
833 0 66 0 769 530 setcachedevice
q
66 0 m
66 519 l
145 519 l
145 446 l
161 471 182 491 209 507 c
236 522 267 530 302 530 c
340 530 371 522 396 506 c
420 490 438 467 448 439 c
489 499 542 530 608 530 c
660 530 699 515 727 487 c
755 459 769 415 769 356 c
769 0 l
681 0 l
681 327 l
681 361 678 386 672 402 c
666 418 656 430 641 440 c
626 449 609 454 589 454 c
552 454 522 441 498 417 c
474 393 462 354 462 301 c
462 0 l
374 0 l
374 337 l
374 376 366 405 352 425 c
338 444 314 454 282 454 c
257 454 234 447 213 434 c
192 421 177 402 168 377 c
158 352 154 316 154 269 c
154 0 l
66 0 l
f
Q
} def
/o {
556 0 33 -11 519 530 setcachedevice
q
33 259 m
33 355 59 426 113 473 c
157 511 212 530 276 530 c
347 530 405 506 451 460 c
496 413 519 349 519 267 c
519 200 509 147 489 109 c
469 71 439 41 401 20 c
363 0 321 -11 276 -11 c
203 -11 144 12 100 58 c
55 104 33 171 33 259 c
124 259 m
124 193 138 143 167 110 c
195 77 232 61 276 61 c
320 61 356 77 385 110 c
414 143 429 194 429 262 c
429 326 414 374 385 408 c
355 441 319 458 276 458 c
232 458 195 441 167 408 c
138 375 124 325 124 259 c
f
Q
} def
/n {
556 0 66 0 487 530 setcachedevice
q
66 0 m
66 519 l
145 519 l
145 445 l
183 501 238 530 310 530 c
341 530 370 524 396 513 c
422 502 442 487 455 469 c
468 451 477 429 482 404 c
485 388 487 359 487 319 c
487 0 l
399 0 l
399 315 l
399 351 395 377 389 395 c
382 413 370 427 353 438 c
335 448 315 454 292 454 c
254 454 221 442 194 418 c
167 394 154 349 154 283 c
154 0 l
66 0 l
f
Q
} def
/p {
556 0 66 -198 516 530 setcachedevice
q
66 -198 m
66 519 l
146 519 l
146 451 l
164 477 186 497 210 510 c
234 523 262 530 296 530 c
340 530 379 518 413 496 c
447 473 472 441 490 399 c
507 357 516 312 516 263 c
516 210 506 162 487 120 c
468 77 440 44 404 22 c
368 0 330 -11 290 -11 c
260 -11 234 -5 211 7 c
187 19 168 34 154 54 c
154 -198 l
66 -198 l
146 256 m
146 189 159 140 186 108 c
213 76 246 61 284 61 c
323 61 356 77 384 110 c
412 143 426 194 426 264 c
426 330 412 379 385 412 c
358 444 326 461 288 461 c
250 461 217 443 189 408 c
160 373 146 322 146 256 c
f
Q
} def
/s {
500 0 31 -11 461 530 setcachedevice
q
31 155 m
118 168 l
122 133 136 106 158 88 c
180 70 212 61 252 61 c
292 61 322 69 342 85 c
361 101 371 121 371 143 c
371 163 362 178 345 190 c
333 198 303 208 255 220 c
191 236 146 250 121 262 c
96 274 77 290 64 311 c
51 332 45 355 45 381 c
45 404 50 425 61 445 c
71 465 86 481 104 494 c
118 504 136 512 160 519 c
184 526 209 530 236 530 c
276 530 312 524 343 512 c
374 500 397 485 412 465 c
426 445 436 418 442 385 c
356 373 l
352 399 340 420 322 435 c
303 450 277 458 243 458 c
202 458 173 451 156 438 c
138 424 130 409 130 391 c
130 379 133 369 141 360 c
148 350 159 343 175 337 c
183 333 209 326 252 314 c
314 298 358 284 382 274 c
406 263 426 247 440 227 c
454 207 461 182 461 152 c
461 122 452 95 435 69 c
418 43 393 24 361 10 c
329 -4 292 -11 252 -11 c
184 -11 133 2 98 30 c
62 58 40 99 31 155 c
f
Q
} def
/r {
333 0 65 0 347 530 setcachedevice
q
65 0 m
65 519 l
144 519 l
144 440 l
164 476 182 500 200 512 c
217 524 236 530 256 530 c
286 530 316 520 347 502 c
316 420 l
294 432 273 439 252 439 c
232 439 215 433 200 422 c
184 410 173 394 167 374 c
157 342 153 308 153 271 c
153 0 l
65 0 l
f
Q
} def
/u {
556 0 64 -11 484 519 setcachedevice
q
406 0 m
406 76 l
365 18 310 -11 241 -11 c
210 -11 181 -5 155 6 c
129 17 109 32 96 50 c
83 68 74 89 69 115 c
65 132 64 159 64 197 c
64 519 l
152 519 l
152 231 l
152 185 153 154 157 138 c
163 115 174 97 192 84 c
210 70 232 64 259 64 c
285 64 309 70 333 84 c
356 97 372 115 382 139 c
391 162 396 196 396 241 c
396 519 l
484 519 l
484 0 l
406 0 l
f
Q
} def
/t {
278 0 18 -6 271 700 setcachedevice
q
258 79 m
271 1 l
245 -3 223 -6 204 -6 c
172 -6 147 -1 130 8 c
112 18 100 31 93 48 c
85 64 82 99 82 152 c
82 450 l
18 450 l
18 519 l
82 519 l
82 647 l
169 700 l
169 519 l
258 519 l
258 450 l
169 450 l
169 147 l
169 121 170 105 174 98 c
177 91 182 85 189 81 c
196 77 206 75 219 75 c
229 75 242 76 258 79 c
f
Q
} def
/y {
500 0 16 -209 491 519 setcachedevice
q
62 -199 m
52 -116 l
71 -121 88 -124 103 -124 c
122 -124 137 -120 149 -114 c
161 -107 170 -98 178 -87 c
184 -78 193 -56 205 -21 c
207 -16 209 -9 213 0 c
16 519 l
111 519 l
219 218 l
233 180 245 140 256 98 c
266 138 278 178 292 216 c
403 519 l
491 519 l
294 -8 l
272 -64 256 -103 245 -125 c
229 -154 211 -175 191 -189 c
171 -202 147 -209 119 -209 c
101 -209 82 -205 62 -199 c
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
false pdfSetup
%%EndSetup
%%Page: 1 1
%%PageMedia: 508x254mm
%%PageBoundingBox: 0 0 1440 720
%%PageOrientation: Portrait
%%BeginPageSetup
1440 720 pdfSetupPaper
pdfStartPage
0 0 1440 720 re W
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 1440 720 re
f
/DeviceRGB {} cs
[0.9176 0.9176 0.949] sc
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0.9176 0.9176 0.949] sc
353.9775 140.34 1000.77 488.17 re
f
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
353.9775 140.34 m
353.9775 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
353.9775 140.34 m
353.9775 140.34 l
f
353.9775 140.34 m
353.9775 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
342.8525 104.699375 Td
/F14_0 40 Tf
(0)
[22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
520.7725 140.34 m
520.7725 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
520.7725 140.34 m
520.7725 140.34 l
f
520.7725 140.34 m
520.7725 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
487.3975 104.699375 Td
/F14_0 40 Tf
(100)
[22.24
0
22.24
0
22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
687.5675 140.34 m
687.5675 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
687.5675 140.34 m
687.5675 140.34 l
f
687.5675 140.34 m
687.5675 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
654.1925 104.699375 Td
/F14_0 40 Tf
(200)
[22.24
0
22.24
0
22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
854.3625 140.34 m
854.3625 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
854.3625 140.34 m
854.3625 140.34 l
f
854.3625 140.34 m
854.3625 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
820.9875 104.699375 Td
/F14_0 40 Tf
(300)
[22.24
0
22.24
0
22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
1021.1575 140.34 m
1021.1575 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
1021.1575 140.34 m
1021.1575 140.34 l
f
1021.1575 140.34 m
1021.1575 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
987.7825 104.699375 Td
/F14_0 40 Tf
(400)
[22.24
0
22.24
0
22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
1187.9525 140.34 m
1187.9525 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
1187.9525 140.34 m
1187.9525 140.34 l
f
1187.9525 140.34 m
1187.9525 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
1154.5775 104.699375 Td
/F14_0 40 Tf
(500)
[22.24
0
22.24
0
22.24
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
1 J
1 j
1 w
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
1354.7475 140.34 m
1354.7475 628.51 l
S
Q
q
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
1354.7475 140.34 m
1354.7475 140.34 l
f
1354.7475 140.34 m
1354.7475 140.34 l
S
[1 0 0 1 0 0] Tm
0 0 Td
1321.3725 104.699375 Td
/F14_0 40 Tf
(600)
[22.24
0
22.24
0
22.24
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
800.55 60.24625 Td
/F14_0 44 Tf
(count)
[22
0
24.464
0
24.464
0
24.464
0
12.232
0] Tj
353.9775 606.320455 m
353.9775 606.320455 l
f
353.9775 606.320455 m
353.9775 606.320455 l
S
[1 0 0 1 0 0] Tm
0 0 Td
131.32125 595.976705 Td
/F14_0 40 Tf
(2M+ACN+H)
[22.24
0
33.32
0
23.36
0
26.68
0
28.88
0
28.88
0
23.36
0
28.88
0] Tj
353.9775 561.941364 m
353.9775 561.941364 l
f
353.9775 561.941364 m
353.9775 561.941364 l
S
[1 0 0 1 0 0] Tm
0 0 Td
216.899375 551.597614 Td
/F14_0 40 Tf
(2M+Na)
[22.24
0
33.32
0
23.36
0
28.88
0
22.24
0] Tj
353.9775 517.562273 m
353.9775 517.562273 l
f
353.9775 517.562273 m
353.9775 517.562273 l
S
[1 0 0 1 0 0] Tm
0 0 Td
109.07125 507.218523 Td
/F14_0 40 Tf
(M+2ACN+2H)
[33.32
0
23.36
0
22.24
0
26.68
0
28.88
0
28.88
0
23.36
0
22.24
0
28.88
0] Tj
353.9775 473.183182 m
353.9775 473.183182 l
f
353.9775 473.183182 m
353.9775 473.183182 l
S
[1 0 0 1 0 0] Tm
0 0 Td
131.32125 462.839432 Td
/F14_0 40 Tf
(M+2ACN+H)
[33.32
0
23.36
0
22.24
0
26.68
0
28.88
0
28.88
0
23.36
0
28.88
0] Tj
353.9775 428.804091 m
353.9775 428.804091 l
f
353.9775 428.804091 m
353.9775 428.804091 l
S
[1 0 0 1 0 0] Tm
0 0 Td
239.149375 418.460341 Td
/F14_0 40 Tf
(M+2H)
[33.32
0
23.36
0
22.24
0
28.88
0] Tj
353.9775 384.425 m
353.9775 384.425 l
f
353.9775 384.425 m
353.9775 384.425 l
S
[1 0 0 1 0 0] Tm
0 0 Td
131.32125 374.08125 Td
/F14_0 40 Tf
(M+ACN+2H)
[33.32
0
23.36
0
26.68
0
28.88
0
28.88
0
23.36
0
22.24
0
28.88
0] Tj
353.9775 340.045909 m
353.9775 340.045909 l
f
353.9775 340.045909 m
353.9775 340.045909 l
S
[1 0 0 1 0 0] Tm
0 0 Td
153.57125 329.702159 Td
/F14_0 40 Tf
(M+ACN+H)
[33.32
0
23.36
0
26.68
0
28.88
0
28.88
0
23.36
0
28.88
0] Tj
353.9775 295.666818 m
353.9775 295.666818 l
f
353.9775 295.666818 m
353.9775 295.666818 l
S
[1 0 0 1 0 0] Tm
0 0 Td
131.32125 285.323068 Td
/F14_0 40 Tf
(M+ACN+Na)
[33.32
0
23.36
0
26.68
0
28.88
0
28.88
0
23.36
0
28.88
0
22.24
0] Tj
353.9775 251.287727 m
353.9775 251.287727 l
f
353.9775 251.287727 m
353.9775 251.287727 l
S
[1 0 0 1 0 0] Tm
0 0 Td
98.00875 240.943977 Td
/F14_0 40 Tf
(M+CH3OH+H)
[33.32
0
23.36
0
28.88
0
28.88
0
22.24
0
31.12
0
28.88
0
23.36
0
28.88
0] Tj
353.9775 206.908636 m
353.9775 206.908636 l
f
353.9775 206.908636 m
353.9775 206.908636 l
S
[1 0 0 1 0 0] Tm
0 0 Td
210.25875 196.564886 Td
/F14_0 40 Tf
(M+NH4)
[33.32
0
23.36
0
28.88
0
28.88
0
22.24
0] Tj
353.9775 162.529545 m
353.9775 162.529545 l
f
353.9775 162.529545 m
353.9775 162.529545 l
S
[1 0 0 1 0 0] Tm
0 0 Td
239.149375 152.185795 Td
/F14_0 40 Tf
(M+Na)
[33.32
0
23.36
0
28.88
0
22.24
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 84.25875 243.815625] Tm
0 0 Td
0 0 Td
/F14_0 44 Tf
(transformation)
[12.232
0
14.652
0
24.464
0
24.464
0
22
0
12.232
0
24.464
0
14.652
0
36.652
0
24.464
0
12.232
0
9.768
0
24.464
0
24.464
0] Tj
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.9161 0.5874 0.6403] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.9161 0.5874 0.6403] sc
353.9775 588.568818 45.03465 35.503273 re
f
353.9775 588.568818 45.03465 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.8638 0.5732 0.3078] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.8638 0.5732 0.3078] sc
353.9775 544.189727 56.7103 35.503273 re
f
353.9775 544.189727 56.7103 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.7 0.6148 0.2831] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.7 0.6148 0.2831] sc
353.9775 499.810636 21.68335 35.503273 re
f
353.9775 499.810636 21.68335 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.5575 0.647 0.2746] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.5575 0.647 0.2746] sc
353.9775 455.431545 208.49375 35.503273 re
f
353.9775 455.431545 208.49375 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.283 0.6889 0.4037] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.283 0.6889 0.4037] sc
353.9775 411.052455 13.3436 35.503272 re
f
353.9775 411.052455 13.3436 35.503272 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.2912 0.676 0.5953] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.2912 0.676 0.5953] sc
353.9775 366.673364 26.6872 35.503272 re
f
353.9775 366.673364 26.6872 35.503272 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.3003 0.6699 0.6918] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.3003 0.6699 0.6918] sc
353.9775 322.294273 712.21465 35.503272 re
f
353.9775 322.294273 712.21465 35.503272 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.33 0.6758 0.8276] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.33 0.6758 0.8276] sc
353.9775 277.915182 51.70645 35.503273 re
f
353.9775 277.915182 51.70645 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.6643 0.6743 0.9216] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.6643 0.6743 0.9216] sc
353.9775 233.536091 780.6006 35.503273 re
f
353.9775 233.536091 780.6006 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.8429 0.5849 0.9099] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.8429 0.5849 0.9099] sc
353.9775 189.157 872.33785 35.503273 re
f
353.9775 189.157 872.33785 35.503273 re
S
Q
q
353.9775 140.34 1000.77 488.17 re
W
/DeviceRGB {} cs
[0.9097 0.5627 0.7869] sc
0.3 w
/DeviceGray {} CS
[0.1] SC
/DeviceRGB {} cs
[0.9097 0.5627 0.7869] sc
353.9775 144.777909 858.99425 35.503273 re
f
353.9775 144.777909 858.99425 35.503273 re
S
Q
q
2 J
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0 0 0] sc
0 J
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
[1 0 0 1 0 0] Tm
0 0 Td
518.20625 633.51 Td
/F14_0 48 Tf
(A. Transformation Types \(Beer\))
[32.016
0
13.344
0
13.344
0
29.328
0
15.984
0
26.688
0
26.688
0
24
0
13.344
0
26.688
0
15.984
0
39.984
0
26.688
0
13.344
0
10.656
0
26.688
0
26.688
0
13.344
0
29.328
0
24
0
26.688
0
26.688
0
24
0
13.344
0
15.984
0
32.016
0
26.688
0
26.688
0
15.984
0
15.984
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
