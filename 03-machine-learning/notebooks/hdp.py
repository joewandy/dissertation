from __future__ import division
import numpy as np
import pylab as plt

class Hdp(object):
	def __init__(self,concentration,base):
		self.concentration = concentration
		self.base = base
		self.samples = []
		self.N = 0

	def sample(self):
		u = np.random.rand()
		new_vaule = None
		if u<(self.concentration/(self.concentration + self.N)):
			# Sample from the base
			new_value = self.base.sample()
			self.samples.append(new_value)
			self.N += 1
		else:
			pos = np.random.randint(0,high=self.N)
			new_value = self.samples[pos]
			self.samples.append(new_value)
			self.N += 1
		return new_value

	def multiple_sample(self,N):
		samples = []
		for i in range(N):
			samples.append(self.sample())
		return samples

class Gauss(object):
	def __init__(self,mu,ss):
		self.mu = mu
		self.ss = ss
	def sample(self):
		u = np.random.randn()*np.sqrt(self.ss) + self.mu
		return u

if __name__=='__main__':
	h = Hdp(1.0,Gauss(0,100))
	sub = []
	for i in range(5):
		sub.append(Hdp(1.0,h))

	all_samps = []
	for i in range(5):
		all_samps.append(np.array(sub[i].multiple_sample(20)))


	print "Samples in top level DP"
	print h.samples

	for i in range(5):
		print "Samples in lower level DP {}".format(i)
		print all_samps[i]

	plt.figure()
	for i,sh in enumerate(sub):
		for j in sh.samples:
			# Data is generated by adding noise!
			plt.plot(j+np.random.randn(),i,'ko')
	for i,sh in enumerate(sub):
		for j in sh.samples:
			plt.plot(j,i,'ro',markersize=15)
	plt.show()
	



